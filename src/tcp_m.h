//
// Generated file, do not edit! Created by opp_msgtool 6.2 from tcp.msg.
//

#ifndef __TCP_M_H
#define __TCP_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// opp_msgtool version check
#define MSGC_VERSION 0x0602
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of opp_msgtool: 'make clean' should help.
#endif

class TcpPacket;
/**
 * Class generated from <tt>tcp.msg:1</tt> by opp_msgtool.
 * <pre>
 * packet TcpPacket
 * {
 *     uint16_t src;
 *     uint16_t dst;
 *     uint32_t seq;
 *     uint32_t ack;
 *     bool ACK;
 *     bool SYN;
 *     bool FIN;
 *     uint8_t payload[];
 * }
 * </pre>
 */
class TcpPacket : public ::omnetpp::cPacket
{
  protected:
    uint16_t src = 0;
    uint16_t dst = 0;
    uint32_t seq = 0;
    uint32_t ack = 0;
    bool ACK = false;
    bool SYN = false;
    bool FIN = false;
    uint8_t *payload = nullptr;
    size_t payload_arraysize = 0;

  private:
    void copy(const TcpPacket& other);

  protected:
    bool operator==(const TcpPacket&) = delete;

  public:
    TcpPacket(const char *name=nullptr, short kind=0);
    TcpPacket(const TcpPacket& other);
    virtual ~TcpPacket();
    TcpPacket& operator=(const TcpPacket& other);
    virtual TcpPacket *dup() const override {return new TcpPacket(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual uint16_t getSrc() const;
    virtual void setSrc(uint16_t src);

    virtual uint16_t getDst() const;
    virtual void setDst(uint16_t dst);

    virtual uint32_t getSeq() const;
    virtual void setSeq(uint32_t seq);

    virtual uint32_t getAck() const;
    virtual void setAck(uint32_t ack);

    virtual bool getACK() const;
    virtual void setACK(bool ACK);

    virtual bool getSYN() const;
    virtual void setSYN(bool SYN);

    virtual bool getFIN() const;
    virtual void setFIN(bool FIN);

    virtual void setPayloadArraySize(size_t size);
    virtual size_t getPayloadArraySize() const;
    virtual uint8_t getPayload(size_t k) const;
    virtual void setPayload(size_t k, uint8_t payload);
    virtual void insertPayload(size_t k, uint8_t payload);
    [[deprecated]] void insertPayload(uint8_t payload) {appendPayload(payload);}
    virtual void appendPayload(uint8_t payload);
    virtual void erasePayload(size_t k);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const TcpPacket& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, TcpPacket& obj) {obj.parsimUnpack(b);}


namespace omnetpp {

template<> inline TcpPacket *fromAnyPtr(any_ptr ptr) { return check_and_cast<TcpPacket*>(ptr.get<cObject>()); }

}  // namespace omnetpp

#endif // ifndef __TCP_M_H

